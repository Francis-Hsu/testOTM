// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// dualGraphs2D
List dualGraphs2D(const arma::mat& X, double epsilon, int maxit, bool verbose);
RcppExport SEXP _testOTM_dualGraphs2D(SEXP XSEXP, SEXP epsilonSEXP, SEXP maxitSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(dualGraphs2D(X, epsilon, maxit, verbose));
    return rcpp_result_gen;
END_RCPP
}
// dualPotential2D
arma::vec dualPotential2D(const arma::mat& Y, const arma::mat& X, const arma::mat& V, const arma::vec& h, const arma::uvec accuVerts);
RcppExport SEXP _testOTM_dualPotential2D(SEXP YSEXP, SEXP XSEXP, SEXP VSEXP, SEXP hSEXP, SEXP accuVertsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type accuVerts(accuVertsSEXP);
    rcpp_result_gen = Rcpp::wrap(dualPotential2D(Y, X, V, h, accuVerts));
    return rcpp_result_gen;
END_RCPP
}
// locateRVD2D
arma::ivec locateRVD2D(const arma::mat& Q, const arma::mat& X, const arma::vec& w);
RcppExport SEXP _testOTM_locateRVD2D(SEXP QSEXP, SEXP XSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(locateRVD2D(Q, X, w));
    return rcpp_result_gen;
END_RCPP
}
// locateRDT2D
arma::ivec locateRDT2D(const arma::mat& Q, const arma::mat& V);
RcppExport SEXP _testOTM_locateRDT2D(SEXP QSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(locateRDT2D(Q, V));
    return rcpp_result_gen;
END_RCPP
}
// GoF2D
List GoF2D(const arma::mat& X, const arma::mat& Y, const arma::mat& XY, const arma::mat& U, double epsilon, int maxit, bool verbose);
RcppExport SEXP _testOTM_GoF2D(SEXP XSEXP, SEXP YSEXP, SEXP XYSEXP, SEXP USEXP, SEXP epsilonSEXP, SEXP maxitSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type XY(XYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(GoF2D(X, Y, XY, U, epsilon, maxit, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_testOTM_dualGraphs2D", (DL_FUNC) &_testOTM_dualGraphs2D, 4},
    {"_testOTM_dualPotential2D", (DL_FUNC) &_testOTM_dualPotential2D, 5},
    {"_testOTM_locateRVD2D", (DL_FUNC) &_testOTM_locateRVD2D, 3},
    {"_testOTM_locateRDT2D", (DL_FUNC) &_testOTM_locateRDT2D, 2},
    {"_testOTM_GoF2D", (DL_FUNC) &_testOTM_GoF2D, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_testOTM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
